name: Deploy

on:
  pull_request:
    branches:
      - main
      - develop
      - release/**
    types:
      - closed

permissions:
  contents: read

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

      - name: Test
        id: npm-mutation-test
        run: npm run test:mutation
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        id: install
        run: npm ci

      - name: Lint Codebase
        id: super-linter
        uses: super-linter/super-linter/slim@v7
        env:
          DEFAULT_BRANCH: main
          FILTER_REGEX_EXCLUDE: dist/**/*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: ${{ github.workspace }}
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_JAVASCRIPT_ES: false
          VALIDATE_JAVASCRIPT_STANDARD: false
          VALIDATE_JSCPD: false
          VALIDATE_TYPESCRIPT_ES: false
          VALIDATE_JSON: false
          VALIDATE_TYPESCRIPT_STANDARD: false
  check-dist:
    name: Check dist/
    runs-on: ubuntu-latest
    needs: [ lint, test-typescript ]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        id: install
        run: npm ci

      - name: Build dist/ Directory
        id: build
        run: npm run bundle

      # This will fail the workflow if the `dist/` directory is different than
      # expected.
      - name: Compare Directories
        id: diff
        run: |
          if [ ! -d dist/ ]; then
            echo "Expected dist/ directory does not exist.  See status below:"
            ls -la ./
            exit 1
          fi
          if [ "$(git diff --ignore-space-at-eol --text dist/ | wc -l)" -gt "0" ]; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff --ignore-space-at-eol --text dist/
            exit 1
          fi



  mutation-test:
    name: GitHub Actions Test
    runs-on: ubuntu-latest
    needs: [ check-dist ]
    outputs:
      mutation_metrics: ${{ steps.test-action.outputs.mutation_metrics }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          node-version: '20'

      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.mutation_metrics }}"

      - name: Upload mutation report
        uses: actions/upload-artifact@v4
        with:
          name: mutation-report
          path: |
            mutation-report.html
            mutation-report.json
            mutation-metrics.json



  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: [ mutation-test ]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        id: install
        run: npm ci

      - name: Configure Git
        shell: bash
        env:
          GIT_USER_NAME: "github-actions"
          GIT_USER_EMAIL: "actions@github.com"
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

      - name: Bump Version
        id: bump-version
        run: |
          # Obtains the new version
          new_version=v$(npm run next-preview --silent | tail -1)
          
          # Update the version in package.json without creating a commit
          echo "Bump version to $new_version"
          npm version $new_version --no-git-tag-version
          
          # Update mutation metrics
          echo ${{ needs.mutation-test.outputs.mutation_metrics }} > mutation-metrics.json
          cat mutation.txt
          
          # Create a commit with the new version 
          git add package.json package-lock.json mutation.txt
          git commit --no-verify -m "chore: bump version to $new_version"
          git tag $new_version
          
          # Push changes
          echo "Version updated to $new_version"
          git push -f origin ${{ github.event.ref }}
          git push -f --tags

  deploy:
    name: Deploy dist to Artifacts
    runs-on: ubuntu-latest
    needs: [ bump-version ]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        id: install
        run: npm ci

      - name: Build dist/ Directory
        id: build
        run: npm run bundle

      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
