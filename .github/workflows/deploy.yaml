name: Deploy

on:
  pull_request:
    branches:
      - main
      - develop
      - release/**
    types:
      - closed

permissions:
  contents: write
  pull-requests: write

jobs:
  check-skip-conditions:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check-conditions.outputs.should_skip }}
    env:
      DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
    steps:
      - name: Check commit author and PR labels
        id: check-conditions
        run: |
          # Default to not skipping
          SHOULD_SKIP="false"

          # Check if this is a push event
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get the commit author
            AUTHOR=$(curl -s -H "Authorization: token $DEPLOY_KEY" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}" \
              | jq -r '.commit.author.name')

            echo "Commit author: $AUTHOR"

            # Skip if commit is from github-actions
            if [[ "$AUTHOR" == "github-actions" ]]; then
              echo "Commit is from github-actions, skipping workflow"
              SHOULD_SKIP="true"
            fi
          # Check PR labels if this is a PR event
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.number }}" != "" ]]; then
            echo "Checking for no-deploy label on PR #${{ github.event.pull_request.number }}"

            # Get PR labels
            LABELS=$(curl -s -H "Authorization: token $DEPLOY_KEY" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" \
              | jq -r '.[].name')

            # Check if no-deploy label exists
            if echo "$LABELS" | grep -q "no-deploy"; then
              echo "PR has no-deploy label, skipping workflow"
              SHOULD_SKIP="true"
            fi
          fi

          echo "should_skip=$SHOULD_SKIP" >> "$GITHUB_OUTPUT"

  test-typescript:
    name: TypeScript Tests
    needs: check-skip-conditions
    if: needs.check-skip-conditions.outputs.should_skip != 'true'
    uses: ./.github/workflows/typescript-test.yaml

  lint:
    name: Lint Code
    needs: check-skip-conditions
    if: needs.check-skip-conditions.outputs.should_skip != 'true'
    uses: ./.github/workflows/lint.yaml

  check-dist:
    name: Check dist
    needs: [check-skip-conditions, lint, test-typescript]
    if: needs.check-skip-conditions.outputs.should_skip != 'true'
    uses: ./.github/workflows/check-dist.yaml

  mutation-test:
    name: Mutation Test
    needs: [check-skip-conditions, check-dist]
    if: needs.check-skip-conditions.outputs.should_skip != 'true'
    uses: ./.github/workflows/mutation-test.yaml
    with:
      upload-metrics: true

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: [check-skip-conditions, mutation-test]
    if: needs.check-skip-conditions.outputs.should_skip != 'true'
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node

      - name: Configure Git
        shell: bash
        env:
          GIT_USER_NAME: 'github-actions'
          GIT_USER_EMAIL: 'actions@github.com'
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

      - name: Bump Version
        id: bump-version
        run: |
          # Obtains the new version
          new_version=v$(npm run next-preview --silent | tail -1)
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

          # Update the version in package.json without creating a commit
          echo "Bump version to $new_version"
          npm version "$new_version" --no-git-tag-version

          # Update mutation metrics
          metrics="${{ needs.mutation-test.outputs.mutation_metrics }}"
          echo "$metrics" > mutation-metrics.json
          echo "Mutation metrics saved to mutation-metrics.json:"

          # Create a commit with the new version 
          git add package.json package-lock.json mutation-metrics.json
          git commit --no-verify -m "chore: bump version to $new_version"
          git tag "$new_version"

          # Push changes directly to the target branch
          # Using DEPLOY_KEY which should have permissions to bypass branch protection
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo "Pushing changes directly to $TARGET_BRANCH"
          git push origin HEAD:"$TARGET_BRANCH"
          git push origin "$new_version"

  verify-push:
    name: Verify Version Push
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref }}
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Verify Version Update
        env:
          NEW_VERSION: ${{ needs.bump-version.outputs.new_version }}
        run: |
          echo "Verifying version update to $NEW_VERSION"

          # Check if the package.json has the new version
          CURRENT_VERSION=$(jq -r ".version" "package.json")
          if [[ "v$CURRENT_VERSION" == "$NEW_VERSION" ]]; then
            echo "✅ Version updated successfully to $NEW_VERSION"
          else
            echo "❌ Version update failed. Current version: v$CURRENT_VERSION, Expected: $NEW_VERSION"
            exit 1
          fi

          # Check if tag exists
          if git tag -l | grep -q "$NEW_VERSION"; then
            echo "✅ Tag $NEW_VERSION created successfully"
          else
            echo "❌ Tag creation failed for $NEW_VERSION"
            exit 1
          fi

  deploy:
    name: Deploy dist to Artifacts
    runs-on: ubuntu-latest
    needs: [verify-push]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node

      - name: Build dist/ Directory
        id: build
        run: npm run bundle

      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
