{"version":3,"file":"index.js","sources":["../src/services/mutation-service.ts","../src/runners/mutation-runner.ts","../src/main.ts","../src/index.ts"],"sourcesContent":["import * as core from '@actions/core'\nimport * as fs from 'fs-extra'\nimport { execSync } from 'child_process'\nimport { MutationMetrics } from '../types/mutation'\n\nexport class MutationService {\n  private readonly metricsFile = 'mutation-metrics.json'\n  private readonly scoreFile = 'mutation.txt'\n\n  async readMutationMetrics(): Promise<MutationMetrics> {\n    try {\n      if (!fs.existsSync(this.metricsFile)) {\n        return this.getDefaultMetrics()\n      }\n      const metrics = await fs.readJson(this.metricsFile)\n      return metrics as MutationMetrics\n    } catch (error) {\n      const errorMessage = (error as Error).message\n      core.warning(\n        `Could not read previous mutation metrics. Using default baseline. ${errorMessage}`\n      )\n      return this.getDefaultMetrics()\n    }\n  }\n\n  async getMutationMetrics(): Promise<MutationMetrics> {\n    const output = execSync('npm run get:mutation-metrics --silent').toString()\n    const metrics = JSON.parse(output)\n\n    return {\n      ...metrics,\n      timestamp: new Date().toISOString()\n    }\n  }\n\n  async saveMetrics(metrics: MutationMetrics): Promise<void> {\n    await fs.writeJson(this.metricsFile, metrics, { spaces: 2 })\n    await fs.writeFile(this.scoreFile, metrics.score.toString())\n  }\n\n  private getDefaultMetrics(): MutationMetrics {\n    return {\n      score: 0,\n      killed: 0,\n      survived: 0,\n      timeout: 0,\n      noCoverage: 0,\n      mutants: {\n        total: 0,\n        mutated: []\n      },\n      testFiles: [],\n      timestamp: new Date().toISOString()\n    }\n  }\n}\n","import { execSync } from 'child_process'\nimport * as core from '@actions/core'\nimport { MutationService } from '../services/mutation-service'\nimport { MutationMetrics } from '../types/mutation'\n\nexport class MutationRunner {\n  constructor(private readonly mutationService: MutationService) {}\n\n  private validateMetrics(metrics: MutationMetrics): void {\n    if (isNaN(metrics.score)) {\n      throw new Error('Invalid score value in metrics')\n    }\n\n    if (metrics.score > 100) {\n      core.warning('Unusually high mutation score detected')\n    }\n  }\n\n  private logDetailedMetrics(metrics: MutationMetrics): void {\n    core.info('Detailed metrics:')\n    core.info(`- Total mutants: ${metrics.mutants.total}`)\n    core.info(`- Killed: ${metrics.killed}`)\n    core.info(`- Survived: ${metrics.survived}`)\n    core.info(`- Timeout: ${metrics.timeout}`)\n    core.info(`- No Coverage: ${metrics.noCoverage}`)\n\n    if (metrics.mutants.mutated.length) {\n      core.debug('Mutated files:')\n      metrics.mutants.mutated.forEach((file) => {\n        core.debug(`  - ${file}`)\n      })\n    }\n  }\n\n  private compareScores(oldScore: number, newScore: number): void {\n    if (newScore < oldScore) {\n      throw new Error(\n        `Tests failed: mutation score has decreased from ${oldScore} to ${newScore}`\n      )\n    }\n\n    const improvement = newScore - oldScore\n    if (improvement > 10) {\n      core.info(\n        `Significant improvement in mutation score: +${improvement.toFixed(2)} points!`\n      )\n    }\n  }\n\n  private runMutationTests(): void {\n    core.info('Running mutation tests...')\n    try {\n      execSync('npm run test:mutation', { stdio: 'inherit' })\n    } catch (error) {\n      const errorMsg = `Test execution failed: ${error instanceof Error ? error.message : 'unknown error'}`\n      core.setFailed(errorMsg)\n      throw new Error(errorMsg)\n    }\n  }\n\n  private async saveMetrics(metrics: MutationMetrics): Promise<void> {\n    try {\n      await this.mutationService.saveMetrics(metrics)\n    } catch (error) {\n      throw new Error(`Failed to save metrics: ${(error as Error).message}`)\n    }\n  }\n\n  async run(): Promise<void> {\n    try {\n      const oldMetrics = await this.mutationService.readMutationMetrics()\n      this.validateMetrics(oldMetrics)\n      core.info(`Old mutation score: ${oldMetrics.score}`)\n\n      this.runMutationTests()\n\n      const newMetrics = await this.mutationService.getMutationMetrics()\n      this.validateMetrics(newMetrics)\n      core.info(`New mutation score: ${newMetrics.score}`)\n\n      this.compareScores(oldMetrics.score, newMetrics.score)\n      this.logDetailedMetrics(newMetrics)\n\n      await this.saveMetrics(newMetrics)\n    } catch (error) {\n      core.setFailed((error as Error).message)\n      throw error\n    }\n  }\n}\n","import * as core from '@actions/core'\nimport { exec } from '@actions/exec'\nimport { MutationService } from './services/mutation-service'\nimport { MutationRunner } from './runners/mutation-runner'\n\nasync function setupNodeVersion(): Promise<void> {\n  try {\n    const nodeVersion = core.getInput('node-version') || '20'\n    // Use volta to switch Node.js version\n    await exec('volta install node@' + nodeVersion)\n    await exec('volta run node --version')\n  } catch (error) {\n    core.warning(\n      `Failed to set Node.js version: ${error}. Continuing with current version.`\n    )\n  }\n}\n\nexport async function run(): Promise<void> {\n  await setupNodeVersion()\n  const mutationService = new MutationService()\n  const mutationRunner = new MutationRunner(mutationService)\n  await mutationRunner.run()\n}\n","/**\n * The entrypoint for the action. This file simply imports and runs the action's\n * main logic.\n */\nimport { run } from './main'\n\n/* istanbul ignore next */\nrun()\n"],"names":[],"mappings":"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"}